xample.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.After;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {

    @Before("execution(* org.example.EmployeeDepartment.displayInfo())")
    public void logBefore(JoinPoint joinPoint) {
        System.out.println("Before method: " + joinPoint.getSignature().getName());
    }

    @AfterReturning(
            pointcut = "execution(* org.example.Developer.getName())",
            returning = "result")
    public void logAfterReturning(JoinPoint joinPoint, Object result) {
        System.out.println("After Returning from method: " + joinPoint.getSignature().getName());
        System.out.println("Returned value: " + result);
    }

    @AfterThrowing(
            pointcut = "execution(* org.example.EmployeeDepartment.setEmployee(..))",
            throwing = "error")
    public void logAfterThrowing(JoinPoint joinPoint, Throwable error) {
        System.out.println("After Throwing from method: " + joinPoint.getSignature().getName());
        System.out.println("Exception: " + error);
    }

    @After("execution(* org.example.Company.displayInfo())")
    public void logAfter(JoinPoint joinPoint) {
        System.out.println("After method: " + joinPoint.getSignature().getName());
    }
}


package org.example;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.annotation.PropertySource;

@Configuration
@ComponentScan(basePackages = "org.example")
@PropertySource("classpath:application.properties")
@EnableAspectJAutoProxy
public class AppConfig {

    @Bean(initMethod = "init", destroyMethod = "destroy")
    public Company company(@Autowired Department department) {
        return new Company(department);
    }

    public static void main(String... args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);

        Company company = context.getBean(Company.class);
        company.displayInfo();


        Developer developer = context.getBean(Developer.class);
        developer.setName("Illya");
        developer.setRole("Senior Software Developer");


        EmployeeDepartment employeeDepartment = context.getBean(EmployeeDepartment.class);
        employeeDepartment.setEmployee(developer);


        company.displayInfo();

        context.close();
    }
}


@EnableAspectJAutoProxy`.

package org.example.aspect;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.JoinPoint;

@Aspect
public class LoggingAspect {

    @Before("execution(* org.example.EmployeeDepartment.displayInfo())")
    public void logBefore(JoinPoint joinPoint) {
        System.out.println("Before method: " + joinPoint.getSignature().getName());
    }


}


package org.example.aspect;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.JoinPoint;

@Aspect
public class LoggingAspect {

    @Before("execution(* org.example.EmployeeDepartment.displayInfo())")
    public void logBefore(JoinPoint joinPoint) {
        System.out.println("Before method: " + joinPoint.getSignature().getName());
    }


}

